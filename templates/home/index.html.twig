{% extends 'base.html.twig' %}

{% block title %}Home{% endblock %}

{% block body %}

    {{ include('components/header.html.twig') }}

    <button id="toggleCreateCardForm">Créer une carte</button>

   <main class="main">
        <div id="calendar" data-url="{{ path('app_calendar_data') }}"></div>
        <div id="section-right">
            <button id="btn--open--avenir" class='btn--a-faire' onclick='openAVenir()'>
                <i class="fa-regular fa-clock"></i></button>
            <div id='a-venir' class="side-list">
                <div id="side-list_title">
                    <button id="btn--close--avenir" class='btn--a-faire' onclick='closeAVenir()'><i class="fa-regular fa-clock"></i></button>
                    <h2>À Venir</h2>
                </div>
                <div class="items">
                    {% for item in cardsData %}
                        <div class="item {% if item.card.isValidated == 0 %} notvalidated {% endif %}"
                             style="border-left-color: {{ item.params.typeColor }} !important;">
                            <p class="card-id">{{ item.card.id }}</p>
                            <p class="type-id">{{ item.card.typeId }}</p>
                            <div class="time">
                                <p class="date">
                                    {% if item.card.stringFrom is not null %}
                                        Du {{ item.card.stringFrom }} <br>Au
                                    {% endif %}
                                    {{ item.card.stringTo }}
                                </p>
                                <div class="time_left">
                                    <i class="fa-solid fa-hourglass-half" style="color:{{ item.params.timeColor }}"></i>
                                    <p class="days">{{ item.card.timeLeft|raw }}</p>
                                </div>
                            </div>
                            <div class="subject">
                                <p class="tag"
                                   style="border-color: {{ item.params.typeColor }}; background-color: {{ item.params.typeColor }}20">{{ item.params.typeName }}</p>
                                <div>
                                    <h3 class="notif-card__title">{{ item.card.title }}</h3>
                                    <p class="notif-card__subject">{{ item.card.ref }} - {{ item.card.subject }}</p>
                                </div>
                            </div>
                            {% if item.params.typeName is same as('rendu') %}
                                <!--<div class="status">
                                    <i class="fa-regular fa-square"></i>
                                    <p>À Rendre</p>
                                </div>-->
                                <div class="status status-button not-done">
                                    <i class="fa-regular fa-square not-done"></i>
                                    <i class="fa-regular fa-square done"></i>
                                    <p>Rendu</p>
                                </div>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </div>
            <div id="createCardFormContainer" class="details"></div>

            <div id="details" class="details">
            </div>
        </div>
        {# params pop-up #}
        <div id="params" style="display:none"></div>
    </main>

{# TODO : refactor code #}
{# script to close the pop-up with the close icon #}
 <style>
    .fa-toggle-on {
        color: #4098FF !important; /* Change this to your desired color */
    }
</style>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        var optionButton = document.getElementById('optionButton');
        var optionButtonIcon = document.getElementById('optionButtonIcon');

        var paramsForm = document.getElementById('paramsForm');

        optionButton.addEventListener('click', function() {
            openParamsPopUp();
        });

        optionButtonIcon.addEventListener('click', function() {
            openParamsPopUp();
        });
        
        async function openParamsPopUp() {
            const params = document.getElementById('params')
            const reponse = await fetch('{{ path('app_home_params') }}');
            params.innerHTML = await reponse.text()
            console.log('params loaded 2')
            params.style.display = 'flex';


            var closeIcon = document.querySelector('#params_pop-up_top_section i.fa-xmark');
             var saveButton = document.getElementById('params_pop-up_saveButton');

            closeIcon.addEventListener('click', function () {
                // Close the params div by hiding it or removing it from the DOM
                //paramsDiv.style.display = 'none'; // You can use 'block', 'inline', etc. if you want to show it again
                // Alternatively, you can remove the entire div from the DOM
                params.style.display = 'none';
            });
            
             saveButton.addEventListener('click', function() {
                // Serialize form data to send
                var formData = new FormData();
                formData.append('homeworkReminder', document.getElementById('homeworkToggle').classList.contains('fa-toggle-on') ? true : false)
                formData.append('examReminder',  document.getElementById('examToggle').classList.contains('fa-toggle-on') ? true : false);
                formData.append('newReminder',  document.getElementById('newToggle').classList.contains('fa-toggle-on') ? true : false);
                formData.append('modifReminder',  document.getElementById('modifToggle').classList.contains('fa-toggle-on') ? true : false);
                formData.append('cookies',  document.getElementById('cookiesToggle').classList.contains('fa-toggle-on') ? true : false);
            
                // Send an AJAX request
                fetch('{{ path('app_home_params') }}', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    // Handle the response as needed
                    console.log(data);
                    params.style.display = 'none';
                    // You can close the pop-up or update the UI based on the response
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });

            // Toggle between fa-toggle-off and fa-toggle-on when params_pop-up_row is clicked
            var paramsRows = document.querySelectorAll('.params_pop-up_row');
            paramsRows.forEach(function (row) {
                row.addEventListener('click', function () {
                    var toggleIcon = row.querySelector('i.fa-solid');
                    if (toggleIcon.classList.contains('fa-toggle-off')) {
                        toggleIcon.classList.remove('fa-toggle-off');
                        toggleIcon.classList.add('fa-toggle-on');
                    } else {
                        toggleIcon.classList.remove('fa-toggle-on');
                        toggleIcon.classList.add('fa-toggle-off');
                    }
                });
            });
        }
       
    });
</script>

<script>
    const aVenir = document.getElementById('a-venir');
    const aVenirInner = aVenir.innerHTML;
    const toggleCreate = document.getElementById('toggleCreateCardForm');

    var xhr = new XMLHttpRequest();
    xhr.open('GET', '{{ path('create_cards') }}', true);
    xhr.onload = function() {
        if (xhr.status === 200) {
            toggleCreate.addEventListener('click', function() {
                aVenir.innerHTML = xhr.responseText;

                const closeCreate = document.getElementById('create-back');
                closeCreate.addEventListener('click', function() {
                    aVenir.innerHTML = aVenirInner;
                });
            });
        }
    }
    xhr.send();

/*     document.addEventListener("DOMContentLoaded", function() {
        console.log('Document ready');

        // Initialisation : Cache le formulaire
        var createCardFormContainer = document.querySelector('#createCardFormContainer');
        createCardFormContainer.style.display = 'none';

        // Charge le formulaire de création de carte en AJAX
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '{{ path('create_cards') }}', true);
        console.log('Formulaire preprechargé');
        xhr.onload = function() {
            console.log('Formulaire prechargé');
            if (xhr.status === 200) {
                console.log('Formulaire chargé');
                createCardFormContainer.innerHTML = xhr.responseText;
                console.log(createCardFormContainer.innerHTML);

                // Ajoute un gestionnaire d'événement pour le clic sur le bouton après le chargement AJAX
                document.querySelector('#toggleCreateCardForm').addEventListener('click', function() {
                    createCardFormContainer.style.display = 'block';
                    let modalcreate = document.getElementById('createCardFormContainer');
                    let modaldetails = document.getElementById('details');
                    console.log('animation');
                    setTimeout(function() {
                        modalcreate.style.transform = 'translateX(-100%)';
                        modalcreate.style.transition = 'transform 0.5s ease-in-out';
                        modaldetails.style.transform = 'translateX(0)';
                    }, 100);

                    let backBtn = document.getElementById('create-back');
                    if (backBtn) {
                        backBtn.addEventListener('click', function() {
                            modalcreate.style.transform = 'translateX(0)';
                        });
                    }
                });




                // Ajoute un gestionnaire d'événement pour le changement sur cards_crd_typ après le chargement AJAX
                document.getElementById('cards_crd_typ').addEventListener('change', function() {
                    var selectedValue = this.value;
                    console.log(selectedValue);

                    // Masquer ou afficher les champs crd_sbj et crd_from en fonction du choix
                    var labelCrdSbj = document.getElementById('label_crd_sbj');
                    var labelCrdFrom = document.getElementById('label_crd_from');

                    if (selectedValue === '1' || selectedValue === '2') {
                        labelCrdSbj.style.display = 'block';
                        labelCrdFrom.style.display = 'none';
                    } else if (selectedValue === '3' || selectedValue === '4') {
                        labelCrdFrom.style.display = 'block';
                        labelCrdSbj.style.display = 'none';
                    } else {
                        // Afficher les deux champs ou effectuer d'autres actions si nécessaire
                        labelCrdSbj.style.display = 'none';
                        labelCrdFrom.style.display = 'none';
                    }
                });
            }
        }
        xhr.send(); */
</script>
{# fin script #}
{# script to close the pop-up with the close icon #}

{% endblock %}


